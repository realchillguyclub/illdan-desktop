[versions]
androidx-lifecycle = "2.9.4"
composeHotReload = "1.0.0-beta07"
composeMultiplatform = "1.9.0"
junit = "4.13.2"
kotlin = "2.2.20"
kotlinx-coroutines = "1.10.2"

# Network & Serialization
retrofit = "2.9.0"
okhttp = "4.11.0"
moshi = "1.14.0"
serialization = "1.9.0"

# Ktor
ktor = "3.3.0"

# Koin
koin = "4.1.1"

# Compose Resources
resources = "1.8.2"

# BuildKonfig
buildkonfig = "0.17.1"

# Firebase
firebase = "34.3.0"
firebase-analytics = "17.4.1"

# Google-Services
google-services = "4.4.3"

# Kakao-Login
kakao-login = "2.21.7"

# Lifecycle
lifecycle = "2.9.4"

# Logging
kermit = "2.0.8"

# Coil
coil = "3.3.0"

# Navigation
navigation = "2.9.0"

# SQLdelight
sqldelight = "2.1.0"

# Coroutines
coroutines = "1.10.2"

# DragAndDrop
reorderable = "3.0.0"

[libraries]
kotlin-test = { module = "org.jetbrains.kotlin:kotlin-test", version.ref = "kotlin" }
kotlin-testJunit = { module = "org.jetbrains.kotlin:kotlin-test-junit", version.ref = "kotlin" }
junit = { module = "junit:junit", version.ref = "junit" }
androidx-lifecycle-viewmodelCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "androidx-lifecycle" }
androidx-lifecycle-runtimeCompose = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "androidx-lifecycle" }
kotlinx-coroutinesSwing = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-swing", version.ref = "kotlinx-coroutines" }

# Network & JSON
retrofit                       = { module = "com.squareup.retrofit2:retrofit",             version.ref = "retrofit" }
retrofit-gson                  = { module = "com.squareup.retrofit2:converter-gson",      version.ref = "retrofit" }
okhttp                         = { module = "com.squareup.okhttp3:okhttp",                 version.ref = "okhttp" }
okhttp-logging-interceptor     = { module = "com.squareup.okhttp3:logging-interceptor",   version.ref = "okhttp" }
moshi                          = { module = "com.squareup.moshi:moshi",                    version.ref = "moshi" }
moshi-kotlin                   = { module = "com.squareup.moshi:moshi-kotlin",             version.ref = "moshi" }
serialization                  = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "serialization" }

# Ktor
ktor-client                    = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-content-negotiation= { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-serialization             = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
ktor-client-logging            = { module = "io.ktor:ktor-client-logging", version.ref = "ktor" }
ktor-client-okhttp             = { module = "io.ktor:ktor-client-okhttp", version.ref = "ktor" }
ktor-client-darwin             = { module = "io.ktor:ktor-client-darwin", version.ref = "ktor" }

# Koin
koinCore                       = { module = "io.insert-koin:koin-core", version.ref = "koin" }
koinCompose                    = { module = "io.insert-koin:koin-compose", version.ref = "koin" }
koinComposeViewModel           = { module = "io.insert-koin:koin-compose-viewmodel", version.ref = "koin" }

# Compose MPP
compose-runtime                = { module = "org.jetbrains.compose.runtime:runtime",       version.ref = "composeMultiplatform" }
compose-foundation             = { group = "org.jetbrains.compose.foundation",  name = "foundation",           version.ref = "composeMultiplatform" }
compose-ui                     = { group = "org.jetbrains.compose.ui",          name = "ui",                   version.ref = "composeMultiplatform" }
compose-material3              = { group = "org.jetbrains.compose.material3",    name = "material3",            version.ref = "composeMultiplatform" }
compose-uiTooling              = { group = "org.jetbrains.compose.ui",          name = "ui-tooling",           version.ref = "composeMultiplatform" }
compose-ui-tooling-preview     = { group = "org.jetbrains.compose.ui",          name = "ui-tooling-preview",   version.ref = "composeMultiplatform" }
compose-components-resources   = { group = "org.jetbrains.compose.components",  name = "components-resources", version.ref = "resources" }

# Firebase
firebase-bom                   = { module = "com.google.firebase:firebase-bom", version.ref = "firebase" }
firebase-analytics             = { module = "com.google.firebase:firebase-analytics", version.ref = "firebase-analytics" }

# Kakao-Login
kakao-login                    = { module = "com.kakao.sdk:v2-user", version.ref = "kakao-login" }

# Lifecycle
lifecycleViewModel             = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel", version.ref = "lifecycle" }
lifecycleViewModelCompose      = { module = "org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose", version.ref = "lifecycle" }
lifecycleRuntimeCompose        = { module = "org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose", version.ref = "lifecycle" }

# Logging
kermit                         = { module = "co.touchlab:kermit", version.ref = "kermit" }

# Coil
coilNetwork                    = { module = "io.coil-kt.coil3:coil-network-ktor", version.ref = "coil" }
coilCompose                    = { module = "io.coil-kt.coil3:coil-compose", version.ref = "coil" }
coilSvg                        = { module = "io.coil-kt.coil3:coil-svg", version.ref = "coil" }

# Navigation
navigation                     = { module = "org.jetbrains.androidx.navigation:navigation-compose", version.ref = "navigation" }

# SqlDelight
driver                         = { module = "app.cash.sqldelight:sqlite-driver", version.ref = "sqldelight" }

# Coroutine Extensions
coroutines-extensions          = { module = "app.cash.sqldelight:coroutines-extensions", version.ref = "sqldelight" }

# Coroutines
coroutines-core                = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }

# Reorderable
reorderable                    = { module = "sh.calvin.reorderable:reorderable", version.ref = "reorderable" }

[plugins]
composeHotReload = { id = "org.jetbrains.compose.hot-reload", version.ref = "composeHotReload" }
composeMultiplatform = { id = "org.jetbrains.compose", version.ref = "composeMultiplatform" }
composeCompiler = { id = "org.jetbrains.kotlin.plugin.compose", version.ref = "kotlin" }
kotlinMultiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
buildKonfig             = { id = "com.codingfeline.buildkonfig", version.ref = "buildkonfig" }
google-services         = { id = "com.google.gms.google-services", version.ref = "google-services" }
sqldelight              = { id = "app.cash.sqldelight", version.ref = "sqldelight" }